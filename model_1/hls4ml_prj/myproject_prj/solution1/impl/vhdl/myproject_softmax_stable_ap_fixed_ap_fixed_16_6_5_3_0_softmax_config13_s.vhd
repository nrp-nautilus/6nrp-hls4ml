-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read_1_reg_890 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_2_reg_897 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_912 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_2_fu_216_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_2_reg_917 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_14_fu_601_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_14_reg_943 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_V_reg_948 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_reg_948_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_reg_948_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_5_reg_953 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_5_reg_953_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_5_reg_953_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_6_reg_958 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_6_reg_958_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_6_reg_958_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_7_reg_963 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_7_reg_963_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_7_reg_963_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln302_fu_649_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln302_reg_973 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln302_1_fu_677_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln302_1_reg_979 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_985 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_985_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal inv_exp_sum_V_reg_995 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1651_fu_164_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_fu_164_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_fu_176_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_1_fu_184_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_1_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_1_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_1_fu_196_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_1_fu_196_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_fu_176_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_1_fu_196_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_2_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_2_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1651_3_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_3_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_234_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1348_fu_240_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1348_1_fu_243_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_247_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_20_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_2_fu_287_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_290_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_22_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_3_fu_330_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_333_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_24_fu_339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_4_fu_373_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_376_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_26_fu_382_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_3_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_5_fu_416_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_419_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_28_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_29_fu_433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_4_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_459_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_467_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_fu_477_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_1_fu_490_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_498_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_11_fu_508_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_2_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_2_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_2_fu_521_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_529_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_12_fu_539_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_3_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_3_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_3_fu_552_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_560_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_13_fu_570_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_4_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_4_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_4_fu_583_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_591_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln255_6_fu_613_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_5_fu_609_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_629_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_30_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln856_fu_635_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln255_8_fu_621_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_7_fu_617_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_fu_657_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_31_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln856_1_fu_663_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln813_1_fu_692_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln813_fu_689_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_695_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_32_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln856_2_fu_701_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_fu_713_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln249_fu_685_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln813_2_fu_721_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_725_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_33_fu_731_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_739_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_19_fu_749_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1270_fu_855_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_1_fu_862_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_2_fu_869_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_3_fu_876_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_4_fu_883_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_fu_855_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1273_fu_762_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_fu_855_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_1_fu_862_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_1_fu_862_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_2_fu_869_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_2_fu_869_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_3_fu_876_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_3_fu_876_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_4_fu_883_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_4_fu_883_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1270_1_fu_862_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_2_fu_869_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_3_fu_876_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_4_fu_883_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_fu_855_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_mul_18s_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4);

    invert_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_mul_18s_17ns_26_1_1_U2826 : component myproject_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_fu_855_p0,
        din1 => mul_ln1270_fu_855_p1,
        dout => mul_ln1270_fu_855_p2);

    mul_mul_18s_17ns_26_1_1_U2827 : component myproject_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_1_fu_862_p0,
        din1 => mul_ln1270_1_fu_862_p1,
        dout => mul_ln1270_1_fu_862_p2);

    mul_mul_18s_17ns_26_1_1_U2828 : component myproject_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_2_fu_869_p0,
        din1 => mul_ln1270_2_fu_869_p1,
        dout => mul_ln1270_2_fu_869_p2);

    mul_mul_18s_17ns_26_1_1_U2829 : component myproject_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_3_fu_876_p0,
        din1 => mul_ln1270_3_fu_876_p1,
        dout => mul_ln1270_3_fu_876_p2);

    mul_mul_18s_17ns_26_1_1_U2830 : component myproject_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_4_fu_883_p0,
        din1 => mul_ln1270_4_fu_883_p1,
        dout => mul_ln1270_4_fu_883_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                exp_res_V_5_reg_953 <= exp_table_q3;
                exp_res_V_6_reg_958 <= exp_table_q2;
                exp_res_V_7_reg_963 <= exp_table_q1;
                exp_res_V_reg_948 <= exp_table_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                exp_res_V_5_reg_953_pp0_iter3_reg <= exp_res_V_5_reg_953;
                exp_res_V_5_reg_953_pp0_iter4_reg <= exp_res_V_5_reg_953_pp0_iter3_reg;
                exp_res_V_6_reg_958_pp0_iter3_reg <= exp_res_V_6_reg_958;
                exp_res_V_6_reg_958_pp0_iter4_reg <= exp_res_V_6_reg_958_pp0_iter3_reg;
                exp_res_V_7_reg_963_pp0_iter3_reg <= exp_res_V_7_reg_963;
                exp_res_V_7_reg_963_pp0_iter4_reg <= exp_res_V_7_reg_963_pp0_iter3_reg;
                exp_res_V_8_reg_985_pp0_iter4_reg <= exp_res_V_8_reg_985;
                exp_res_V_reg_948_pp0_iter3_reg <= exp_res_V_reg_948;
                exp_res_V_reg_948_pp0_iter4_reg <= exp_res_V_reg_948_pp0_iter3_reg;
                inv_exp_sum_V_reg_995 <= invert_table_q0;
                select_ln302_1_reg_979 <= select_ln302_1_fu_677_p3;
                select_ln302_reg_973 <= select_ln302_fu_649_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                exp_res_V_8_reg_985 <= exp_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_14_reg_943 <= p_Result_14_fu_601_p3;
                p_read_1_reg_890 <= p_read4;
                p_read_2_reg_897 <= p_read3;
                p_read_3_reg_902 <= p_read2;
                p_read_4_reg_907 <= p_read1;
                p_read_5_reg_912 <= p_read;
                select_ln66_2_reg_917 <= select_ln66_2_fu_216_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln856_1_fu_663_p2 <= std_logic_vector(unsigned(exp_table_q1) + unsigned(exp_table_q2));
    add_ln856_2_fu_701_p2 <= std_logic_vector(unsigned(select_ln302_1_reg_979) + unsigned(select_ln302_reg_973));
    add_ln856_fu_635_p2 <= std_logic_vector(unsigned(exp_table_q3) + unsigned(exp_table_q4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1270_fu_855_p2(25 downto 10);
    ap_return_1 <= mul_ln1270_1_fu_862_p2(25 downto 10);
    ap_return_2 <= mul_ln1270_2_fu_869_p2(25 downto 10);
    ap_return_3 <= mul_ln1270_3_fu_876_p2(25 downto 10);
    ap_return_4 <= mul_ln1270_4_fu_883_p2(25 downto 10);
    exp_table_address0 <= zext_ln255_4_fu_625_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_3_fu_578_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_2_fu_547_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_1_fu_516_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_fu_485_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1651_1_fu_184_p0 <= p_read2;
    icmp_ln1651_1_fu_184_p1 <= p_read3;
    icmp_ln1651_1_fu_184_p2 <= "1" when (signed(icmp_ln1651_1_fu_184_p0) < signed(icmp_ln1651_1_fu_184_p1)) else "0";
    icmp_ln1651_2_fu_204_p2 <= "1" when (signed(select_ln66_fu_176_p3) < signed(select_ln66_1_fu_196_p3)) else "0";
    icmp_ln1651_3_fu_224_p2 <= "1" when (signed(select_ln66_2_reg_917) < signed(p_read_1_reg_890)) else "0";
    icmp_ln1651_fu_164_p0 <= p_read;
    icmp_ln1651_fu_164_p1 <= p_read1;
    icmp_ln1651_fu_164_p2 <= "1" when (signed(icmp_ln1651_fu_164_p0) < signed(icmp_ln1651_fu_164_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_757_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_fu_713_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_32_fu_705_p3(0) = '1') else 
        add_ln856_2_fu_701_p2;
    mul_ln1270_1_fu_862_p0 <= sext_ln1273_fu_762_p1(18 - 1 downto 0);
    mul_ln1270_1_fu_862_p1 <= mul_ln1270_1_fu_862_p10(17 - 1 downto 0);
    mul_ln1270_1_fu_862_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_5_reg_953_pp0_iter4_reg),26));
    mul_ln1270_2_fu_869_p0 <= sext_ln1273_fu_762_p1(18 - 1 downto 0);
    mul_ln1270_2_fu_869_p1 <= mul_ln1270_2_fu_869_p10(17 - 1 downto 0);
    mul_ln1270_2_fu_869_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_6_reg_958_pp0_iter4_reg),26));
    mul_ln1270_3_fu_876_p0 <= sext_ln1273_fu_762_p1(18 - 1 downto 0);
    mul_ln1270_3_fu_876_p1 <= mul_ln1270_3_fu_876_p10(17 - 1 downto 0);
    mul_ln1270_3_fu_876_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_7_reg_963_pp0_iter4_reg),26));
    mul_ln1270_4_fu_883_p0 <= sext_ln1273_fu_762_p1(18 - 1 downto 0);
    mul_ln1270_4_fu_883_p1 <= mul_ln1270_4_fu_883_p10(17 - 1 downto 0);
    mul_ln1270_4_fu_883_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_8_reg_985_pp0_iter4_reg),26));
    mul_ln1270_fu_855_p0 <= sext_ln1273_fu_762_p1(18 - 1 downto 0);
    mul_ln1270_fu_855_p1 <= mul_ln1270_fu_855_p10(17 - 1 downto 0);
    mul_ln1270_fu_855_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_reg_948_pp0_iter4_reg),26));
    overflow_1_fu_318_p2 <= (xor_ln895_1_fu_312_p2 and p_Result_23_fu_304_p3);
    overflow_2_fu_361_p2 <= (xor_ln895_2_fu_355_p2 and p_Result_25_fu_347_p3);
    overflow_3_fu_404_p2 <= (xor_ln895_3_fu_398_p2 and p_Result_27_fu_390_p3);
    overflow_4_fu_447_p2 <= (xor_ln895_4_fu_441_p2 and p_Result_29_fu_433_p3);
    overflow_fu_275_p2 <= (xor_ln895_fu_269_p2 and p_Result_21_fu_261_p3);
    p_Result_11_fu_508_p3 <= 
        select_ln346_1_fu_490_p3 when (xor_ln302_1_fu_324_p2(0) = '1') else 
        tmp_1_fu_498_p4;
    p_Result_12_fu_539_p3 <= 
        select_ln346_2_fu_521_p3 when (xor_ln302_2_fu_367_p2(0) = '1') else 
        tmp_2_fu_529_p4;
    p_Result_13_fu_570_p3 <= 
        select_ln346_3_fu_552_p3 when (xor_ln302_3_fu_410_p2(0) = '1') else 
        tmp_3_fu_560_p4;
    p_Result_14_fu_601_p3 <= 
        select_ln346_4_fu_583_p3 when (xor_ln302_4_fu_453_p2(0) = '1') else 
        tmp_4_fu_591_p4;
    p_Result_19_fu_749_p3 <= 
        ap_const_lv10_1FF when (p_Result_33_fu_731_p3(0) = '1') else 
        tmp_5_fu_739_p4;
    p_Result_20_fu_253_p3 <= ret_V_fu_247_p2(16 downto 16);
    p_Result_21_fu_261_p3 <= ret_V_fu_247_p2(15 downto 15);
    p_Result_22_fu_296_p3 <= ret_V_1_fu_290_p2(16 downto 16);
    p_Result_23_fu_304_p3 <= ret_V_1_fu_290_p2(15 downto 15);
    p_Result_24_fu_339_p3 <= ret_V_2_fu_333_p2(16 downto 16);
    p_Result_25_fu_347_p3 <= ret_V_2_fu_333_p2(15 downto 15);
    p_Result_26_fu_382_p3 <= ret_V_3_fu_376_p2(16 downto 16);
    p_Result_27_fu_390_p3 <= ret_V_3_fu_376_p2(15 downto 15);
    p_Result_28_fu_425_p3 <= ret_V_4_fu_419_p2(16 downto 16);
    p_Result_29_fu_433_p3 <= ret_V_4_fu_419_p2(15 downto 15);
    p_Result_30_fu_641_p3 <= p_Val2_5_fu_629_p2(17 downto 17);
    p_Result_31_fu_669_p3 <= p_Val2_6_fu_657_p2(17 downto 17);
    p_Result_32_fu_705_p3 <= p_Val2_7_fu_695_p2(17 downto 17);
    p_Result_33_fu_731_p3 <= p_Val2_8_fu_725_p2(17 downto 17);
    p_Result_s_fu_477_p3 <= 
        select_ln346_fu_459_p3 when (xor_ln302_fu_281_p2(0) = '1') else 
        tmp_fu_467_p4;
    p_Val2_5_fu_629_p2 <= std_logic_vector(unsigned(zext_ln255_6_fu_613_p1) + unsigned(zext_ln255_5_fu_609_p1));
    p_Val2_6_fu_657_p2 <= std_logic_vector(unsigned(zext_ln255_8_fu_621_p1) + unsigned(zext_ln255_7_fu_617_p1));
    p_Val2_7_fu_695_p2 <= std_logic_vector(unsigned(zext_ln813_1_fu_692_p1) + unsigned(zext_ln813_fu_689_p1));
    p_Val2_8_fu_725_p2 <= std_logic_vector(unsigned(zext_ln249_fu_685_p1) + unsigned(zext_ln813_2_fu_721_p1));
    ret_V_1_fu_290_p2 <= std_logic_vector(signed(sext_ln1348_2_fu_287_p1) - signed(sext_ln1348_1_fu_243_p1));
    ret_V_2_fu_333_p2 <= std_logic_vector(signed(sext_ln1348_3_fu_330_p1) - signed(sext_ln1348_1_fu_243_p1));
    ret_V_3_fu_376_p2 <= std_logic_vector(signed(sext_ln1348_4_fu_373_p1) - signed(sext_ln1348_1_fu_243_p1));
    ret_V_4_fu_419_p2 <= std_logic_vector(signed(sext_ln1348_5_fu_416_p1) - signed(sext_ln1348_1_fu_243_p1));
    ret_V_fu_247_p2 <= std_logic_vector(signed(sext_ln1348_fu_240_p1) - signed(sext_ln1348_1_fu_243_p1));
    select_ln302_1_fu_677_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_31_fu_669_p3(0) = '1') else 
        add_ln856_1_fu_663_p2;
    select_ln302_fu_649_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_30_fu_641_p3(0) = '1') else 
        add_ln856_fu_635_p2;
    select_ln346_1_fu_490_p3 <= 
        ap_const_lv10_1FF when (overflow_1_fu_318_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_2_fu_521_p3 <= 
        ap_const_lv10_1FF when (overflow_2_fu_361_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_3_fu_552_p3 <= 
        ap_const_lv10_1FF when (overflow_3_fu_404_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_4_fu_583_p3 <= 
        ap_const_lv10_1FF when (overflow_4_fu_447_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_fu_459_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_275_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln66_1_fu_196_p1 <= p_read2;
    select_ln66_1_fu_196_p2 <= p_read3;
    select_ln66_1_fu_196_p3 <= 
        select_ln66_1_fu_196_p1 when (xor_ln1651_1_fu_190_p2(0) = '1') else 
        select_ln66_1_fu_196_p2;
    select_ln66_2_fu_216_p3 <= 
        select_ln66_fu_176_p3 when (xor_ln1651_2_fu_210_p2(0) = '1') else 
        select_ln66_1_fu_196_p3;
    select_ln66_fu_176_p1 <= p_read;
    select_ln66_fu_176_p2 <= p_read1;
    select_ln66_fu_176_p3 <= 
        select_ln66_fu_176_p1 when (xor_ln1651_fu_170_p2(0) = '1') else 
        select_ln66_fu_176_p2;
        sext_ln1273_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_995),26));

        sext_ln1348_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_234_p3),17));

        sext_ln1348_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_4_reg_907),17));

        sext_ln1348_3_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_902),17));

        sext_ln1348_4_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_897),17));

        sext_ln1348_5_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_890),17));

        sext_ln1348_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_5_reg_912),17));

    tmp_1_fu_498_p4 <= ret_V_1_fu_290_p2(15 downto 6);
    tmp_2_fu_529_p4 <= ret_V_2_fu_333_p2(15 downto 6);
    tmp_3_fu_560_p4 <= ret_V_3_fu_376_p2(15 downto 6);
    tmp_4_fu_591_p4 <= ret_V_4_fu_419_p2(15 downto 6);
    tmp_5_fu_739_p4 <= p_Val2_8_fu_725_p2(17 downto 8);
    tmp_fu_467_p4 <= ret_V_fu_247_p2(15 downto 6);
    x_max_V_fu_234_p3 <= 
        select_ln66_2_reg_917 when (xor_ln1651_3_fu_228_p2(0) = '1') else 
        p_read_1_reg_890;
    xor_ln1651_1_fu_190_p2 <= (icmp_ln1651_1_fu_184_p2 xor ap_const_lv1_1);
    xor_ln1651_2_fu_210_p2 <= (icmp_ln1651_2_fu_204_p2 xor ap_const_lv1_1);
    xor_ln1651_3_fu_228_p2 <= (icmp_ln1651_3_fu_224_p2 xor ap_const_lv1_1);
    xor_ln1651_fu_170_p2 <= (icmp_ln1651_fu_164_p2 xor ap_const_lv1_1);
    xor_ln302_1_fu_324_p2 <= (p_Result_23_fu_304_p3 xor p_Result_22_fu_296_p3);
    xor_ln302_2_fu_367_p2 <= (p_Result_25_fu_347_p3 xor p_Result_24_fu_339_p3);
    xor_ln302_3_fu_410_p2 <= (p_Result_27_fu_390_p3 xor p_Result_26_fu_382_p3);
    xor_ln302_4_fu_453_p2 <= (p_Result_29_fu_433_p3 xor p_Result_28_fu_425_p3);
    xor_ln302_fu_281_p2 <= (p_Result_21_fu_261_p3 xor p_Result_20_fu_253_p3);
    xor_ln895_1_fu_312_p2 <= (p_Result_22_fu_296_p3 xor ap_const_lv1_1);
    xor_ln895_2_fu_355_p2 <= (p_Result_24_fu_339_p3 xor ap_const_lv1_1);
    xor_ln895_3_fu_398_p2 <= (p_Result_26_fu_382_p3 xor ap_const_lv1_1);
    xor_ln895_4_fu_441_p2 <= (p_Result_28_fu_425_p3 xor ap_const_lv1_1);
    xor_ln895_fu_269_p2 <= (p_Result_20_fu_253_p3 xor ap_const_lv1_1);
    zext_ln249_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q0),18));
    zext_ln255_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_11_fu_508_p3),64));
    zext_ln255_2_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_12_fu_539_p3),64));
    zext_ln255_3_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_13_fu_570_p3),64));
    zext_ln255_4_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_14_reg_943),64));
    zext_ln255_5_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q4),18));
    zext_ln255_6_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q3),18));
    zext_ln255_7_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q2),18));
    zext_ln255_8_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table_q1),18));
    zext_ln255_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_477_p3),64));
    zext_ln265_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_19_fu_749_p3),64));
    zext_ln813_1_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln302_1_reg_979),18));
    zext_ln813_2_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_713_p3),18));
    zext_ln813_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln302_reg_973),18));
end behav;
